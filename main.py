import os
import re
import random
import hashlib
import urllib2
import hmac
from google.appengine.api import urlfetch
from google.appengine.api import users
from string import letters
from google.appengine.api import images
from google.appengine.ext import blobstore
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
import datetime
import webapp2
import jinja2

from google.appengine.ext import ndb

template_dir = os.path.join(os.path.dirname(__file__), 'templates')
jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
                               autoescape = True)


secret = 'ID,fmkf458FDHhfJIJ9j%^%hY77RRF76gb.2'

def make_secure_val(val):
    return '%s|%s' % (val, hmac.new(secret, val).hexdigest())

def check_secure_val(secure_val):
    val = secure_val.split('|')[0]
    if secure_val == make_secure_val(val):
        return val

def render_str(template, **params):
    t = jinja_env.get_template(template)
    return t.render(params)

class MainHandler(webapp2.RequestHandler):
    def write(self, *a, **kw):
        self.response.out.write(*a, **kw)

    def render_str(self, template, **params):
        return render_str(template, **params)

    def render(self, template, **kw):
        self.write(self.render_str(template, **kw))

    def set_secure_cookie(self, name, val):
        cookie_val = make_secure_val(val)
        self.response.headers.add_header(
            'Set-Cookie',
            '%s=%s; Path=/' % (name, cookie_val))

    def read_secure_cookie(self, name):
        cookie_val = self.request.cookies.get(name)
        return cookie_val and check_secure_val(cookie_val)

    def login(self, user):
        self.set_secure_cookie('user_id', str(user.key.id()))

    def logout(self):
        self.response.headers.add_header('Set-Cookie', 'user_id=; Path=/')

    def initialize(self, *a, **kw):
        webapp2.RequestHandler.initialize(self, *a, **kw)
        uid = self.read_secure_cookie('user_id')
        self.user = uid and Users.by_id(int(uid))

##### user stuff
def make_salt(length = 32):
    return ''.join(random.choice(letters) for x in xrange(length))

def make_pw_hash(name, pw, salt = None):
    if not salt:
        salt = make_salt()
    h = hashlib.sha512(name + pw + salt).hexdigest()
    return '%s,%s' % (salt, h)

def valid_pw(name, password, h):
    salt = h.split(',')[0]
    return h == make_pw_hash(name, password, salt)

def users_key(group = 'default'):
    return db.Key.from_path('users', group)     

def render_post(response, post):
    response.out.write('<b>' + post.subject + '</b><br>')
    response.out.write(post.content)


class Users(ndb.Model):

    username = ndb.StringProperty(required = True)
    password_hash = ndb.StringProperty(required = True)
    first_name = ndb.StringProperty(required = True)
    last_name = ndb.StringProperty(required = True)

    @classmethod
    def by_id(cls, uid):
        user = cls.get_by_id(uid) 
        return user

    @classmethod
    def by_username(cls, username):
        user = cls.query(cls.username == username).get()
        return user

    @classmethod
    def login(cls, username, password):
        user = cls.by_username(username)
        if user and valid_pw(username, password, user.password_hash):
            return user

    @classmethod
    def create_user(cls, user):
        u = cls.by_username(user.username)
        if not u:
            u = Users()
            u.username = user.username
            u.password_hash = make_pw_hash(user.username, user.password_hash)
            u.first_name = user.first_name
            u.last_name = user.last_name
            u.put()
            return True
        return False


class MainPage(MainHandler):
    def get(self):
        if self.user:
            self.redirect('/protected')
        else:
            # user = Users(username = "btn_login", password_hash="btn710@G#", first_name="James", last_name="Bond")
            # Users.create_user(user)
            self.render('index.html')

    def post(self):
        username = self.request.get('username').lower()
        password = self.request.get('password')
        u = Users.login(username, password)
        if u:
            self.login(u)
            self.redirect('/protected')
        else:
            msg = 'Invalid login'
            self.render('index.html', error = msg, flag="flag")	


class Logout(MainHandler):
    def get(self):
        self.logout()
        self.redirect('/')

class Protected(MainHandler):
    def get(self):
        if self.user:
            self.render("protected.html", username = self.user.username, firstname = self.user.first_name, lastname = self.user.last_name)
        else:
            self.render("index.html")

app = webapp2.WSGIApplication([('/', MainPage),
                               ('/logout', Logout),
                               ('/protected', Protected)],
                              debug=True)
